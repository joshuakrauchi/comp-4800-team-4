{"ast":null,"code":"import Map from \"ol/Map\";\nimport TileLayer from \"ol/layer/Tile\";\nimport MapView from \"ol/View\";\nimport Feature from \"ol/Feature\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport OSM from \"ol/source/OSM\";\nimport { fromLonLat } from \"ol/proj\";\nimport { Attribution, defaults as defaultControls } from \"ol/control\";\nimport { Icon, Style } from \"ol/style\";\nimport { Point } from \"ol/geom\";\nimport MapImageData from \"./MapImageData\";\nimport pinData from \"../../../data/pinData\";\nimport pinImage from \"../../../images/pinImage.png\";\nvar MAP_INITIAL_ZOOM = 16;\nvar MAP_MINIMUM_ZOOM = 0;\nvar MAP_MAXIMUM_ZOOM = 20;\nvar MAP_EXTENT = [-13706000, 6300000, -13602000, 6322300];\nvar MAP_INITIAL_POSITION = [-13704000, 6321150];\nvar PRELOAD_LEVELS = 5;\n\nvar createPinLayer = function createPinLayer(lon, lat, image) {\n  var coords = fromLonLat([lon, lat]);\n  var pinFeature = new Feature({\n    geometry: new Point(coords)\n  });\n  var pinSource = new VectorSource({\n    features: [pinFeature]\n  });\n  var pinImage = new Icon({\n    src: image.url,\n    scale: image.scale,\n    opacity: image.opacity\n  });\n  var pinStyle = new Style({\n    image: pinImage\n  });\n  var pinLayer = new VectorLayer({\n    source: pinSource,\n    style: pinStyle\n  });\n  return pinLayer;\n};\n\nvar tryWatchLocation = function tryWatchLocation(userPin) {\n  if (!navigator.geolocation) return;\n  navigator.geolocation.watchPosition(function (position) {\n    updateLocation(position, userPin);\n  });\n};\n\nvar updateLocation = function updateLocation(currentPosition, userPin) {\n  var _userPin$getSource, _userPin$getSource$ge, _userPin$getSource$ge2;\n\n  var coords = currentPosition.coords;\n  (_userPin$getSource = userPin.getSource()) == null ? void 0 : (_userPin$getSource$ge = _userPin$getSource.getFeatures()[0]) == null ? void 0 : (_userPin$getSource$ge2 = _userPin$getSource$ge.getGeometry()) == null ? void 0 : _userPin$getSource$ge2.setCoordinates(fromLonLat([coords.longitude, coords.latitude]));\n};\n\nvar addBadgePins = function addBadgePins(map, foundBadges) {\n  for (var i = 0; i < pinData.length && i < foundBadges.length; ++i) {\n    var pin = pinData[i];\n    var pinLayer = void 0;\n    var found = foundBadges[i];\n\n    if (found) {\n      pinLayer = createPinLayer(pin.lon, pin.lat, pin.badgeImage);\n    } else {\n      pinLayer = createPinLayer(pin.lon, pin.lat, pin.pinImage);\n    }\n\n    map.addLayer(pinLayer);\n  }\n};\n\nvar createUserPin = function createUserPin() {\n  return createPinLayer(0, 0, new MapImageData(pinImage, 1.0, 1.0));\n};\n\nvar createMap = function createMap() {\n  var attribution = new Attribution({\n    collapsible: true\n  });\n  var mapControls = defaultControls({\n    attribution: false,\n    zoom: false\n  }).extend([attribution]);\n  var mapLayer = new TileLayer({\n    source: new OSM(),\n    preload: PRELOAD_LEVELS\n  });\n  var mapView = new MapView({\n    center: MAP_INITIAL_POSITION,\n    zoom: MAP_INITIAL_ZOOM,\n    minZoom: MAP_MINIMUM_ZOOM,\n    maxZoom: MAP_MAXIMUM_ZOOM,\n    extent: MAP_EXTENT\n  });\n  var createdMap = new Map({\n    target: \"dummy\",\n    layers: [mapLayer],\n    view: mapView,\n    controls: mapControls\n  });\n  return createdMap;\n};\n\nexport { tryWatchLocation, addBadgePins, createUserPin, createMap };","map":{"version":3,"sources":["C:/Pariya/BCIT/5 Spring 2022/Practicum 2/github/comp-4800-team-4/client/src/components/BadgeMap/Utilities/utilities.tsx"],"names":["Map","TileLayer","MapView","Feature","VectorLayer","VectorSource","OSM","fromLonLat","Attribution","defaults","defaultControls","Icon","Style","Point","MapImageData","pinData","pinImage","MAP_INITIAL_ZOOM","MAP_MINIMUM_ZOOM","MAP_MAXIMUM_ZOOM","MAP_EXTENT","MAP_INITIAL_POSITION","PRELOAD_LEVELS","createPinLayer","lon","lat","image","coords","pinFeature","geometry","pinSource","features","src","url","scale","opacity","pinStyle","pinLayer","source","style","tryWatchLocation","userPin","navigator","geolocation","watchPosition","position","updateLocation","currentPosition","getSource","getFeatures","getGeometry","setCoordinates","longitude","latitude","addBadgePins","map","foundBadges","i","length","pin","found","badgeImage","addLayer","createUserPin","createMap","attribution","collapsible","mapControls","zoom","extend","mapLayer","preload","mapView","center","minZoom","maxZoom","extent","createdMap","target","layers","view","controls"],"mappings":"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","sourcesContent":["import Map from \"ol/Map\";\r\nimport TileLayer from \"ol/layer/Tile\";\r\nimport MapView from \"ol/View\";\r\nimport Feature from \"ol/Feature\";\r\nimport VectorLayer from \"ol/layer/Vector\";\r\nimport VectorSource from \"ol/source/Vector\";\r\nimport OSM from \"ol/source/OSM\";\r\nimport { fromLonLat } from \"ol/proj\";\r\nimport { Attribution, defaults as defaultControls } from \"ol/control\";\r\nimport { Icon, Style } from \"ol/style\";\r\nimport { Point } from \"ol/geom\";\r\n\r\nimport MapImageData from \"./MapImageData\";\r\nimport pinData from \"../../../data/pinData\";\r\nimport pinImage from \"../../../images/pinImage.png\";\r\n\r\nconst MAP_INITIAL_ZOOM = 16;\r\nconst MAP_MINIMUM_ZOOM = 0;\r\nconst MAP_MAXIMUM_ZOOM = 20;\r\n// UTM coordinates used below. In order from [minX, minY, maxX, maxY].\r\nconst MAP_EXTENT = [-13706000, 6300000, -13602000, 6322300];\r\nconst MAP_INITIAL_POSITION = [-13704000, 6321150];\r\nconst PRELOAD_LEVELS = 5;\r\n\r\n// Create a pin vector image layer for adding to the map.\r\nconst createPinLayer = (\r\n  lon: number,\r\n  lat: number,\r\n  image: MapImageData\r\n): VectorLayer<VectorSource<Point>> => {\r\n  let coords = fromLonLat([lon, lat]);\r\n  const pinFeature = new Feature<Point>({\r\n    geometry: new Point(coords),\r\n  });\r\n\r\n  const pinSource = new VectorSource<Point>({\r\n    features: [pinFeature],\r\n  });\r\n\r\n  const pinImage = new Icon({\r\n    src: image.url,\r\n    scale: image.scale,\r\n    opacity: image.opacity,\r\n  });\r\n\r\n  const pinStyle = new Style({\r\n    image: pinImage,\r\n  });\r\n\r\n  const pinLayer = new VectorLayer<VectorSource<Point>>({\r\n    source: pinSource,\r\n    style: pinStyle,\r\n  });\r\n\r\n  return pinLayer;\r\n};\r\n\r\n// Try to get the user's position. If allowed, update their position as much as possible.\r\nconst tryWatchLocation = (userPin: VectorLayer<VectorSource<Point>>): void => {\r\n  if (!navigator.geolocation) return;\r\n\r\n  // Update the location if given permission.\r\n  navigator.geolocation.watchPosition((position: GeolocationPosition) => {\r\n    updateLocation(position, userPin);\r\n  });\r\n};\r\n\r\nconst updateLocation = (\r\n  currentPosition: GeolocationPosition,\r\n  userPin: VectorLayer<VectorSource<Point>>\r\n): void => {\r\n  let coords = currentPosition.coords;\r\n  userPin\r\n    .getSource()\r\n    ?.getFeatures()[0]\r\n    ?.getGeometry()\r\n    ?.setCoordinates(fromLonLat([coords.longitude, coords.latitude]));\r\n};\r\n\r\nconst addBadgePins = (map: Map, foundBadges: boolean[]): void => {\r\n  for (let i = 0; i < pinData.length && i < foundBadges.length; ++i) {\r\n    let pin = pinData[i];\r\n    let pinLayer;\r\n    let found = foundBadges[i];\r\n\r\n    if (found) {\r\n      pinLayer = createPinLayer(pin.lon, pin.lat, pin.badgeImage);\r\n    } else {\r\n      pinLayer = createPinLayer(pin.lon, pin.lat, pin.pinImage);\r\n    }\r\n\r\n    map.addLayer(pinLayer);\r\n  }\r\n};\r\n\r\nconst createUserPin = (): VectorLayer<VectorSource<Point>> => {\r\n  return createPinLayer(0, 0, new MapImageData(pinImage, 1.0, 1.0));\r\n};\r\n\r\nconst createMap = (): Map => {\r\n  // Change the default map controls to get rid of the regular attributions\r\n  // on the bottom right and replace them with a collapsible button.\r\n  const attribution = new Attribution({\r\n    collapsible: true,\r\n  });\r\n\r\n  const mapControls = defaultControls({\r\n    attribution: false,\r\n    zoom: false,\r\n  }).extend([attribution]);\r\n\r\n  const mapLayer = new TileLayer({\r\n    source: new OSM(),\r\n    preload: PRELOAD_LEVELS,\r\n  });\r\n\r\n  const mapView = new MapView({\r\n    center: MAP_INITIAL_POSITION,\r\n    zoom: MAP_INITIAL_ZOOM,\r\n    minZoom: MAP_MINIMUM_ZOOM,\r\n    maxZoom: MAP_MAXIMUM_ZOOM,\r\n    extent: MAP_EXTENT,\r\n  });\r\n\r\n  const createdMap = new Map({\r\n    target: \"dummy\",\r\n    layers: [mapLayer],\r\n    view: mapView,\r\n    controls: mapControls,\r\n  });\r\n\r\n  return createdMap;\r\n};\r\n\r\nexport { tryWatchLocation, addBadgePins, createUserPin, createMap };\r\n"]},"metadata":{},"sourceType":"module"}