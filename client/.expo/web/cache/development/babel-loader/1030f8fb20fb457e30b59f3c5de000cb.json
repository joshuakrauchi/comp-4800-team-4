{"ast":null,"code":"import Map from \"ol/Map\";\nimport TileLayer from \"ol/layer/Tile\";\nimport MapView from \"ol/View\";\nimport Feature from \"ol/Feature\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport OSM from \"ol/source/OSM\";\nimport { fromLonLat } from \"ol/proj\";\nimport { Attribution, defaults as defaultControls } from \"ol/control\";\nimport { Icon, Style } from \"ol/style\";\nimport { Point } from \"ol/geom\";\nimport pinData from \"../data/pinData\";\nimport pinImage from \"../images/pinImage.png\";\n\nvar createPinLayer = function createPinLayer(lon, lat, name, image) {\n  var coords = fromLonLat([lon, lat]);\n  var pinFeature = new Feature({\n    geometry: new Point(coords)\n  });\n  var pinSource = new VectorSource({\n    features: [pinFeature]\n  });\n  var pinStyle = new Style({\n    image: new Icon({\n      src: image,\n      scale: 1.0,\n      opacity: 0.85\n    })\n  });\n  return new VectorLayer({\n    source: pinSource,\n    style: pinStyle,\n    name: name\n  });\n};\n\nvar tryWatchLocation = function tryWatchLocation(userPin) {\n  if (!navigator.geolocation) return;\n  navigator.geolocation.watchPosition(function (position) {\n    updateLocation(position, userPin);\n  });\n};\n\nvar updateLocation = function updateLocation(currentPosition, userPin) {\n  var coords = currentPosition.coords;\n  userPin.getSource().getFeatures()[0].getGeometry().setCoordinates(fromLonLat([coords.longitude, coords.latitude]));\n};\n\nvar addBadgePins = function addBadgePins(map) {\n  Object.keys(pinData).forEach(function (key) {\n    var name = key;\n    var crab = pinData[key];\n    map.addLayer(createPinLayer(crab.lon, crab.lat, name, crab.pinImage));\n    map.addLayer(createPinLayer(crab.lon, crab.lat - 0.0001, name, crab.crabImage));\n  });\n};\n\nvar addUserPin = function addUserPin() {\n  return createPinLayer(0, 0, \"Your Location\", pinImage);\n};\n\nvar createMap = function createMap(mapElement) {\n  var attribution = new Attribution({\n    collapsible: true\n  });\n  var mapControls = defaultControls({\n    attribution: false,\n    zoom: false\n  }).extend([attribution]);\n  var initialMap = new Map({\n    target: mapElement.current,\n    layers: [new TileLayer({\n      source: new OSM()\n    })],\n    view: new MapView({\n      center: [26371208.304614782, 6321386.5232699495],\n      zoom: 19,\n      constrainOnlyCenter: true,\n      extent: [26380907.255707346, 6321574.382779852, 26371437.9, 6321182.95]\n    }),\n    controls: mapControls\n  });\n  initialMap.on(\"singleclick\", function (event) {\n    initialMap.forEachFeatureAtPixel(event.pixel, function (feature) {\n      console.log(feature.getGeometry().getFlatCoordinates());\n    });\n  });\n  return initialMap;\n};\n\nexport { tryWatchLocation, addBadgePins, addUserPin, createMap };","map":{"version":3,"sources":["C:/Users/Joshua/comp-4800-team-4/client/UserMap/mapUtilities.js"],"names":["Map","TileLayer","MapView","Feature","VectorLayer","VectorSource","OSM","fromLonLat","Attribution","defaults","defaultControls","Icon","Style","Point","pinData","pinImage","createPinLayer","lon","lat","name","image","coords","pinFeature","geometry","pinSource","features","pinStyle","src","scale","opacity","source","style","tryWatchLocation","userPin","navigator","geolocation","watchPosition","position","updateLocation","currentPosition","getSource","getFeatures","getGeometry","setCoordinates","longitude","latitude","addBadgePins","map","Object","keys","forEach","key","crab","addLayer","crabImage","addUserPin","createMap","mapElement","attribution","collapsible","mapControls","zoom","extend","initialMap","target","current","layers","view","center","constrainOnlyCenter","extent","controls","on","event","forEachFeatureAtPixel","pixel","feature","console","log","getFlatCoordinates"],"mappings":"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","sourcesContent":["import Map from \"ol/Map\";\r\nimport TileLayer from \"ol/layer/Tile\";\r\nimport MapView from \"ol/View\";\r\nimport Feature from \"ol/Feature\";\r\nimport VectorLayer from \"ol/layer/Vector\";\r\nimport VectorSource from \"ol/source/Vector\";\r\nimport OSM from \"ol/source/OSM\";\r\nimport { fromLonLat } from \"ol/proj\";\r\nimport { Attribution, defaults as defaultControls } from \"ol/control\";\r\nimport { Icon, Style } from \"ol/style\";\r\nimport { Point } from \"ol/geom\";\r\n\r\nimport pinData from \"../data/pinData\";\r\nimport pinImage from \"../images/pinImage.png\";\r\n\r\n// Create a pin vector image layer for adding to the map.\r\nconst createPinLayer = (lon, lat, name, image) => {\r\n  let coords = fromLonLat([lon, lat]);\r\n  const pinFeature = new Feature({\r\n    geometry: new Point(coords),\r\n  });\r\n\r\n  const pinSource = new VectorSource({\r\n    features: [pinFeature],\r\n  });\r\n\r\n  const pinStyle = new Style({\r\n    image: new Icon({\r\n      src: image,\r\n      scale: 1.0,\r\n      opacity: 0.85,\r\n    }),\r\n  });\r\n\r\n  return new VectorLayer({\r\n    source: pinSource,\r\n    style: pinStyle,\r\n    name: name,\r\n  });\r\n};\r\n\r\n// Try to get the user's position. If allowed, update their position as much as possible.\r\nconst tryWatchLocation = (userPin) => {\r\n  if (!navigator.geolocation) return;\r\n\r\n  // Update the location if given permission.\r\n  navigator.geolocation.watchPosition((position) => {\r\n    updateLocation(position, userPin);\r\n  });\r\n};\r\n\r\nconst updateLocation = (currentPosition, userPin) => {\r\n  let coords = currentPosition.coords;\r\n  userPin\r\n    .getSource()\r\n    .getFeatures()[0]\r\n    .getGeometry()\r\n    .setCoordinates(fromLonLat([coords.longitude, coords.latitude]));\r\n};\r\n\r\nconst addBadgePins = (map) => {\r\n  Object.keys(pinData).forEach((key) => {\r\n    let name = key;\r\n    let crab = pinData[key];\r\n\r\n    map.addLayer(createPinLayer(crab.lon, crab.lat, name, crab.pinImage));\r\n    map.addLayer(createPinLayer(crab.lon, crab.lat - 0.0001, name, crab.crabImage));\r\n  });\r\n};\r\n\r\nconst addUserPin = () => {\r\n  return createPinLayer(0, 0, \"Your Location\", pinImage);\r\n}\r\n\r\nconst createMap = (mapElement) => {\r\n  // Change the default map controls to get rid of the regular attributions\r\n  // on the bottom right and replace them with a collapsible button.\r\n  const attribution = new Attribution({\r\n    collapsible: true,\r\n  });\r\n\r\n  const mapControls = defaultControls({ attribution: false, zoom: false }).extend([attribution]);\r\n\r\n  const initialMap = new Map({\r\n    target: mapElement.current,\r\n    layers: [\r\n      new TileLayer({\r\n        source: new OSM(),\r\n      }),\r\n    ],\r\n    view: new MapView({\r\n      center: [26371208.304614782, 6321386.5232699495],\r\n        zoom: 19,\r\n\r\n        constrainOnlyCenter: true,\r\n        extent: [26380907.255707346, 6321574.382779852, 26371437.9, 6321182.95]\r\n        // 26371252.27159731, 6321397.270212819\r\n    }),\r\n    controls: mapControls,\r\n  });\r\n\r\n  initialMap.on(\"singleclick\", (event) => {\r\n    initialMap.forEachFeatureAtPixel(event.pixel, (feature) => {\r\n      console.log(feature.getGeometry().getFlatCoordinates());\r\n    });\r\n  });\r\n\r\n  return initialMap;\r\n};\r\n\r\nexport { tryWatchLocation, addBadgePins, addUserPin, createMap };\r\n"]},"metadata":{},"sourceType":"module"}