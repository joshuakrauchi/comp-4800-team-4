{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport \"ol/ol.css\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport pinData from \"./data/pinData\";\nimport circleRed from \"./images/circleRed.png\";\nimport Map from \"ol/Map\";\nimport TileLayer from \"ol/layer/Tile\";\nimport View from \"ol/View\";\nimport OSM from \"ol/source/OSM\";\nimport { fromLonLat } from \"ol/proj\";\nimport createPinLayer from \"./utilities/createPinLayer\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar UserMap = function UserMap() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      map = _useState2[0],\n      setMap = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userPin = _useState4[0],\n      setUserPin = _useState4[1];\n\n  var mapElement = useRef();\n\n  var tryWatchLocation = function tryWatchLocation() {\n    if (!navigator.geolocation) return;\n\n    if (!userPin) {\n      var newUserPin = createPinLayer(0, 0, \"me\", circleRed);\n      setUserPin(newUserPin);\n      map.addLayer(newUserPin);\n      return;\n    }\n\n    navigator.geolocation.watchPosition(updateLocation);\n  };\n\n  var updateLocation = function updateLocation(currentPosition) {\n    var coords = currentPosition.coords;\n    userPin.getSource().getFeatures()[0].getGeometry().setCoordinates(fromLonLat([coords.longitude, coords.latitude]));\n  };\n\n  var addBadgePins = function addBadgePins() {\n    Object.keys(pinData).forEach(function (key) {\n      var name = key;\n      var crab = pinData[key];\n      map.addLayer(createPinLayer(crab.lon, crab.lat, name, circleRed));\n    });\n  };\n\n  var createMap = function createMap() {\n    var initialMap = new Map({\n      target: mapElement.current,\n      layers: [new TileLayer({\n        source: new OSM()\n      })],\n      view: new View({\n        zoom: 18.8,\n        extent: [226838, 5084100, 255700, 5055200]\n      })\n    });\n    initialMap.on(\"click\", function (e) {\n      console.log(e.coordinate);\n    });\n    setMap(initialMap);\n  };\n\n  useEffect(function () {\n    if (!map) {\n      createMap();\n      return;\n    }\n\n    addBadgePins();\n    tryWatchLocation();\n  });\n  return _jsx(\"div\", {\n    ref: mapElement,\n    style: {\n      height: \"600px\",\n      width: \"100%\"\n    }\n  });\n};\n\nexport default UserMap;","map":{"version":3,"sources":["C:/Pariya/BCIT/5 Spring 2022/Practicum 2/github/comp-4800-team-4/client/UserMap.js"],"names":["React","useState","useRef","useEffect","pinData","circleRed","Map","TileLayer","View","OSM","fromLonLat","createPinLayer","UserMap","map","setMap","userPin","setUserPin","mapElement","tryWatchLocation","navigator","geolocation","newUserPin","addLayer","watchPosition","updateLocation","currentPosition","coords","getSource","getFeatures","getGeometry","setCoordinates","longitude","latitude","addBadgePins","Object","keys","forEach","key","name","crab","lon","lat","createMap","initialMap","target","current","layers","source","view","zoom","extent","on","e","console","log","coordinate","height","width"],"mappings":"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","sourcesContent":["import \"ol/ol.css\";\r\nimport React, { useState, useRef, useEffect } from \"react\";\r\nimport pinData from \"./data/pinData\";\r\nimport circleRed from \"./images/circleRed.png\";\r\nimport Map from \"ol/Map\";\r\nimport TileLayer from \"ol/layer/Tile\";\r\nimport View from \"ol/View\";\r\nimport OSM from \"ol/source/OSM\";\r\nimport { fromLonLat } from \"ol/proj\";\r\nimport createPinLayer from \"./utilities/createPinLayer\";\r\n\r\nconst UserMap = () => {\r\n  const [map, setMap] = useState();\r\n  const [userPin, setUserPin] = useState();\r\n  const mapElement = useRef();\r\n\r\n  // Try to get the user's position. If allowed, update their position as much as possible.\r\n  const tryWatchLocation = () => {\r\n    if (!navigator.geolocation) return;\r\n\r\n    if (!userPin) {\r\n      let newUserPin = createPinLayer(0, 0, \"me\", circleRed);\r\n      setUserPin(newUserPin);\r\n      map.addLayer(newUserPin);\r\n      return;\r\n    }\r\n\r\n    // Update the location if given permission.\r\n    navigator.geolocation.watchPosition(updateLocation);\r\n  };\r\n\r\n  const updateLocation = (currentPosition) => {\r\n    let coords = currentPosition.coords;\r\n    userPin.getSource().getFeatures()[0].getGeometry().setCoordinates(fromLonLat([coords.longitude, coords.latitude]));\r\n  };\r\n\r\n  const addBadgePins = () => {\r\n    Object.keys(pinData).forEach((key) => {\r\n      let name = key;\r\n      let crab = pinData[key];\r\n\r\n      map.addLayer(createPinLayer(crab.lon, crab.lat, name, circleRed));\r\n    });\r\n  };\r\n\r\n  const createMap = () => {\r\n    const initialMap = new Map({\r\n      target: mapElement.current,\r\n      layers: [\r\n        new TileLayer({\r\n          source: new OSM(),\r\n        }),\r\n      ],\r\n      view: new View({\r\n        //center: [26371208.304614782, 6321386.5232699495],\r\n        zoom: 18.8,\r\n        extent: [226838, 5084100, 255700, 5055200]\r\n        //extent: [26371343.002500594, 6321274.555634816, 26371064.56447223, 6321482.682611802]\r\n        // 26371252.27159731, 6321397.270212819\r\n      }),\r\n    });\r\n    initialMap.on(\"click\", function(e) {\r\n      console.log(e.coordinate);\r\n    })\r\n    setMap(initialMap);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!map) {\r\n      createMap();\r\n      return;\r\n    }\r\n\r\n    addBadgePins();\r\n    tryWatchLocation();\r\n  });\r\n\r\n  return <div ref={mapElement} style={{ height: \"600px\", width: \"100%\" }}></div>;\r\n};\r\n\r\nexport default UserMap;\r\n"]},"metadata":{},"sourceType":"module"}