{"ast":null,"code":"import React, { forwardRef, useImperativeHandle, useRef } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { WebView } from 'react-native-webview';\nimport { WebSource } from \"../../web/components/source\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var NativeContainer = forwardRef(function (props, ref) {\n  var webview = useRef(null);\n  var injectedRenderMapScript = \"\\n    window.ReactNativeOpenlayers.map = (\" + props.render.toString() + \")((message) => window.ReactNativeOpenlayers.postMessage(message));\\n  \";\n\n  var handleOnMessage = function handleOnMessage(event) {\n    if (!props.onMessage) {\n      return;\n    }\n\n    props.onMessage(JSON.parse(event.nativeEvent.data));\n  };\n\n  useImperativeHandle(ref, function () {\n    return {\n      postAction: function postAction(action) {\n        var _webview$current;\n\n        (_webview$current = webview.current) == null ? void 0 : _webview$current.injectJavaScript(\"\\n        (\" + action.toString() + \")(window.ReactNativeOpenlayers.map, (message) => window.ReactNativeOpenlayers.postMessage(message));\\n      \");\n      }\n    };\n  });\n  return _jsx(View, {\n    style: StyleSheet.flatten([styles.container, props.containerStyle]),\n    children: _jsx(WebView, {\n      ref: webview,\n      source: {\n        html: WebSource({\n          id: props.id\n        })\n      },\n      onMessage: handleOnMessage,\n      injectedJavaScript: injectedRenderMapScript\n    })\n  });\n});\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["C:/Users/Joshua/comp-4800-team-4/client/node_modules/react-native-openlayers/lib/native/components/container.tsx"],"names":["React","forwardRef","useImperativeHandle","useRef","WebView","WebSource","NativeContainer","props","ref","webview","injectedRenderMapScript","render","toString","handleOnMessage","event","onMessage","JSON","parse","nativeEvent","data","postAction","action","current","injectJavaScript","StyleSheet","flatten","styles","container","containerStyle","html","id","create","flex"],"mappings":"AACA,OAAOA,KAAP,IAAgBC,UAAhB,EAAuDC,mBAAvD,EAA4EC,MAA5E,QAA0F,OAA1F;;;AAEA,SAASC,OAAT,QAA6C,sBAA7C;AAEA,SAASC,SAAT;;AAcA,OAAO,IAAMC,eAA0G,GAAGL,UAAU,CAAC,UAACM,KAAD,EAAQC,GAAR,EAAgB;AACnJ,MAAMC,OAAO,GAAGN,MAAM,CAAU,IAAV,CAAtB;AAGA,MAAMO,uBAAuB,kDACWH,KAAK,CAACI,MAAN,CAAaC,QAAb,EADX,2EAA7B;;AAIA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAgC;AACtD,QAAI,CAACP,KAAK,CAACQ,SAAX,EAAsB;AACpB;AACD;;AAEDR,IAAAA,KAAK,CAACQ,SAAN,CAAgBC,IAAI,CAACC,KAAL,CAAWH,KAAK,CAACI,WAAN,CAAkBC,IAA7B,CAAhB;AACD,GAND;;AAQAjB,EAAAA,mBAAmB,CAACM,GAAD,EAAM;AAAA,WAAO;AAC9BY,MAAAA,UAAU,EAAE,oBAACC,MAAD,EAAY;AAAA;;AAEtB,4BAAAZ,OAAO,CAACa,OAAR,sCAAiBC,gBAAjB,iBACKF,MAAM,CAACT,QAAP,EADL;AAGD;AAN6B,KAAP;AAAA,GAAN,CAAnB;AASA,SACE,KAAC,IAAD;AAAM,IAAA,KAAK,EAAEY,UAAU,CAACC,OAAX,CAAmB,CAACC,MAAM,CAACC,SAAR,EAAmBpB,KAAK,CAACqB,cAAzB,CAAnB,CAAb;AAAA,cACE,KAAC,OAAD;AACE,MAAA,GAAG,EAAEnB,OADP;AAEE,MAAA,MAAM,EAAE;AACNoB,QAAAA,IAAI,EAAExB,SAAS,CAAC;AAAEyB,UAAAA,EAAE,EAAEvB,KAAK,CAACuB;AAAZ,SAAD;AADT,OAFV;AAKE,MAAA,SAAS,EAAEjB,eALb;AAME,MAAA,kBAAkB,EAAEH;AANtB;AADF,IADF;AAYD,CArCmI,CAA7H;AAuCP,IAAMgB,MAAM,GAAGF,UAAU,CAACO,MAAX,CAAkB;AAC/BJ,EAAAA,SAAS,EAAE;AACTK,IAAAA,IAAI,EAAE;AADG;AADoB,CAAlB,CAAf","sourcesContent":["import { Map } from 'ol';\nimport React, { forwardRef, ForwardRefExoticComponent, useImperativeHandle, useRef } from 'react';\nimport { StyleSheet, View, ViewStyle } from 'react-native';\nimport { WebView, WebViewMessageEvent } from 'react-native-webview';\n\nimport { WebSource } from '../../web/components/source';\nimport { Message, PostMessage } from '../types/webview';\n\nexport type NativeContainerProps = {\n  id: string;\n  render: (postMessage: PostMessage) => Map;\n  onMessage?: (message: Message) => void;\n  containerStyle?: ViewStyle;\n};\n\nexport type NativeContainerRef = {\n  postAction: (action: (map: Map, postMessage: PostMessage) => void) => void;\n};\n\nexport const NativeContainer: ForwardRefExoticComponent<NativeContainerProps & React.RefAttributes<NativeContainerRef>> = forwardRef((props, ref) => {\n  const webview = useRef<WebView>(null);\n\n  // props.render to string -> function () {...} -> use it with params (function() {...})(...) at Web platform\n  const injectedRenderMapScript = /* javascript */ `\n    window.ReactNativeOpenlayers.map = (${props.render.toString()})((message) => window.ReactNativeOpenlayers.postMessage(message));\n  `;\n\n  const handleOnMessage = (event: WebViewMessageEvent) => {\n    if (!props.onMessage) {\n      return;\n    }\n\n    props.onMessage(JSON.parse(event.nativeEvent.data) as Message);\n  };\n\n  useImperativeHandle(ref, () => ({\n    postAction: (action) => {\n      // action to string -> function () {...} -> use it with params (function() {...})(...) at Web platform\n      webview.current?.injectJavaScript(/* javascript */ `\n        (${action.toString()})(window.ReactNativeOpenlayers.map, (message) => window.ReactNativeOpenlayers.postMessage(message));\n      `);\n    },\n  }));\n\n  return (\n    <View style={StyleSheet.flatten([styles.container, props.containerStyle])}>\n      <WebView\n        ref={webview}\n        source={{\n          html: WebSource({ id: props.id }),\n        }}\n        onMessage={handleOnMessage}\n        injectedJavaScript={injectedRenderMapScript}\n      />\n    </View>\n  );\n});\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}