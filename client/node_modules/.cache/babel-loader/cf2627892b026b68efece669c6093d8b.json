{"ast":null,"code":"import Map from \"ol/Map\";\nimport TileLayer from \"ol/layer/Tile\";\nimport MapView from \"ol/View\";\nimport Feature from \"ol/Feature\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport OSM from \"ol/source/OSM\";\nimport { fromLonLat } from \"ol/proj\";\nimport { Attribution, defaults as defaultControls } from \"ol/control\";\nimport { Icon, Style } from \"ol/style\";\nimport { Point } from \"ol/geom\";\nimport pinData from \"../../data/pinData\";\nimport pinImage from \"../../images/pinImage.png\";\nconst MAP_INITIAL_ZOOM = 16;\nconst MAP_MINIMUM_ZOOM = 0; // UTM coordinates used below. In order from [minX, minY, maxX, maxY].\n\nconst MAP_EXTENT = [-13706000, 6320000, -13702000, 6322300];\nconst MAP_INITIAL_POSITION = [-13704000, 6321150]; // Create a pin vector image layer for adding to the map.\n\nconst createPinLayer = (lon, lat, image) => {\n  let coords = fromLonLat([lon, lat]);\n  const pinFeature = new Feature({\n    geometry: new Point(coords)\n  });\n  const pinSource = new VectorSource({\n    features: [pinFeature]\n  });\n  const pinImage = new Icon({\n    src: image,\n    scale: 1.0,\n    opacity: 0.85\n  });\n  const pinStyle = new Style({\n    image: pinImage\n  });\n  const pinLayer = new VectorLayer({\n    source: pinSource,\n    style: pinStyle\n  });\n  return pinLayer;\n}; // Try to get the user's position. If allowed, update their position as much as possible.\n\n\nconst tryWatchLocation = userPin => {\n  if (!navigator.geolocation) return; // Update the location if given permission.\n\n  navigator.geolocation.watchPosition(position => {\n    updateLocation(position, userPin);\n  });\n};\n\nconst updateLocation = (currentPosition, userPin) => {\n  var _userPin$getSource, _userPin$getSource$ge, _userPin$getSource$ge2;\n\n  let coords = currentPosition.coords;\n  (_userPin$getSource = userPin.getSource()) === null || _userPin$getSource === void 0 ? void 0 : (_userPin$getSource$ge = _userPin$getSource.getFeatures()[0]) === null || _userPin$getSource$ge === void 0 ? void 0 : (_userPin$getSource$ge2 = _userPin$getSource$ge.getGeometry()) === null || _userPin$getSource$ge2 === void 0 ? void 0 : _userPin$getSource$ge2.setCoordinates(fromLonLat([coords.longitude, coords.latitude]));\n};\n\nconst addBadgePins = map => {\n  Object.keys(pinData).forEach(key => {\n    let element = pinData[key];\n    map.addLayer(createPinLayer(element.lon, element.lat, element.pinImage));\n  });\n};\n\nconst createUserPin = () => {\n  return createPinLayer(0, 0, pinImage);\n};\n\nconst createMap = () => {\n  // Change the default map controls to get rid of the regular attributions\n  // on the bottom right and replace them with a collapsible button.\n  const attribution = new Attribution({\n    collapsible: true\n  });\n  const mapControls = defaultControls({\n    attribution: false,\n    zoom: false\n  }).extend([attribution]);\n  const mapLayer = new TileLayer({\n    source: new OSM()\n  });\n  const mapView = new MapView({\n    center: MAP_INITIAL_POSITION,\n    zoom: MAP_INITIAL_ZOOM,\n    minZoom: MAP_MINIMUM_ZOOM,\n    extent: MAP_EXTENT\n  });\n  const createdMap = new Map({\n    target: \"dummy\",\n    layers: [mapLayer],\n    view: mapView,\n    controls: mapControls\n  });\n  return createdMap;\n};\n\nexport { tryWatchLocation, addBadgePins, createUserPin, createMap };","map":{"version":3,"sources":["C:/Users/GAURA/comp-4800-team-4/client/src/components/BadgeMap/utilities.tsx"],"names":["Map","TileLayer","MapView","Feature","VectorLayer","VectorSource","OSM","fromLonLat","Attribution","defaults","defaultControls","Icon","Style","Point","pinData","pinImage","MAP_INITIAL_ZOOM","MAP_MINIMUM_ZOOM","MAP_EXTENT","MAP_INITIAL_POSITION","createPinLayer","lon","lat","image","coords","pinFeature","geometry","pinSource","features","src","scale","opacity","pinStyle","pinLayer","source","style","tryWatchLocation","userPin","navigator","geolocation","watchPosition","position","updateLocation","currentPosition","getSource","getFeatures","getGeometry","setCoordinates","longitude","latitude","addBadgePins","map","Object","keys","forEach","key","element","addLayer","createUserPin","createMap","attribution","collapsible","mapControls","zoom","extend","mapLayer","mapView","center","minZoom","extent","createdMap","target","layers","view","controls"],"mappings":"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","sourcesContent":["import Map from \"ol/Map\";\r\nimport TileLayer from \"ol/layer/Tile\";\r\nimport MapView from \"ol/View\";\r\nimport Feature from \"ol/Feature\";\r\nimport VectorLayer from \"ol/layer/Vector\";\r\nimport VectorSource from \"ol/source/Vector\";\r\nimport OSM from \"ol/source/OSM\";\r\nimport { fromLonLat } from \"ol/proj\";\r\nimport { Attribution, defaults as defaultControls } from \"ol/control\";\r\nimport { Icon, Style } from \"ol/style\";\r\nimport { Point } from \"ol/geom\";\r\n\r\nimport pinData from \"../../data/pinData\";\r\nimport pinImage from \"../../images/pinImage.png\";\r\n\r\nconst MAP_INITIAL_ZOOM = 16;\r\nconst MAP_MINIMUM_ZOOM = 0;\r\n// UTM coordinates used below. In order from [minX, minY, maxX, maxY].\r\nconst MAP_EXTENT = [-13706000, 6320000, -13702000, 6322300];\r\nconst MAP_INITIAL_POSITION = [-13704000, 6321150];\r\n\r\n// Create a pin vector image layer for adding to the map.\r\nconst createPinLayer = (\r\n  lon: number,\r\n  lat: number,\r\n  image: string\r\n): VectorLayer<VectorSource<Point>> => {\r\n  let coords = fromLonLat([lon, lat]);\r\n  const pinFeature = new Feature<Point>({\r\n    geometry: new Point(coords),\r\n  });\r\n\r\n  const pinSource = new VectorSource<Point>({\r\n    features: [pinFeature],\r\n  });\r\n\r\n  const pinImage = new Icon({\r\n    src: image,\r\n    scale: 1.0,\r\n    opacity: 0.85,\r\n  });\r\n\r\n  const pinStyle = new Style({\r\n    image: pinImage,\r\n  });\r\n\r\n  const pinLayer = new VectorLayer<VectorSource<Point>>({\r\n    source: pinSource,\r\n    style: pinStyle,\r\n  });\r\n\r\n  return pinLayer;\r\n};\r\n\r\n// Try to get the user's position. If allowed, update their position as much as possible.\r\nconst tryWatchLocation = (userPin: VectorLayer<VectorSource<Point>>): void => {\r\n  if (!navigator.geolocation) return;\r\n\r\n  // Update the location if given permission.\r\n  navigator.geolocation.watchPosition((position: GeolocationPosition) => {\r\n    updateLocation(position, userPin);\r\n  });\r\n};\r\n\r\nconst updateLocation = (\r\n  currentPosition: GeolocationPosition,\r\n  userPin: VectorLayer<VectorSource<Point>>\r\n): void => {\r\n  let coords = currentPosition.coords;\r\n  userPin\r\n    .getSource()\r\n    ?.getFeatures()[0]\r\n    ?.getGeometry()\r\n    ?.setCoordinates(fromLonLat([coords.longitude, coords.latitude]));\r\n};\r\n\r\nconst addBadgePins = (map: Map): void => {\r\n  Object.keys(pinData).forEach((key) => {\r\n    let element = pinData[key as keyof typeof pinData];\r\n\r\n    map.addLayer(createPinLayer(element.lon, element.lat, element.pinImage));\r\n  });\r\n};\r\n\r\nconst createUserPin = (): VectorLayer<VectorSource<Point>> => {\r\n  return createPinLayer(0, 0, pinImage);\r\n};\r\n\r\nconst createMap = (): Map => {\r\n  // Change the default map controls to get rid of the regular attributions\r\n  // on the bottom right and replace them with a collapsible button.\r\n  const attribution = new Attribution({\r\n    collapsible: true,\r\n  });\r\n\r\n  const mapControls = defaultControls({\r\n    attribution: false,\r\n    zoom: false,\r\n  }).extend([attribution]);\r\n\r\n  const mapLayer = new TileLayer({\r\n    source: new OSM(),\r\n  });\r\n\r\n  const mapView = new MapView({\r\n    center: MAP_INITIAL_POSITION,\r\n    zoom: MAP_INITIAL_ZOOM,\r\n    minZoom: MAP_MINIMUM_ZOOM,\r\n    extent: MAP_EXTENT,\r\n  });\r\n\r\n  const createdMap = new Map({\r\n    target: \"dummy\",\r\n    layers: [mapLayer],\r\n    view: mapView,\r\n    controls: mapControls,\r\n  });\r\n\r\n  return createdMap;\r\n};\r\n\r\nexport { tryWatchLocation, addBadgePins, createUserPin, createMap };\r\n"]},"metadata":{},"sourceType":"module"}