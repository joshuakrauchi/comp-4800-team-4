{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport \"ol/ol.css\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport pinData from \"./data/pinData\";\nimport circleRed from \"./images/circleRed.png\";\nimport Map from \"ol/Map\";\nimport TileLayer from \"ol/layer/Tile\";\nimport View from \"ol/View\";\nimport OSM from \"ol/source/OSM\";\nimport { fromLonLat } from \"ol/proj\";\nimport createPinLayer from \"./utilities/createPinLayer\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar locationString = \"location\";\n\nvar UserMap = function UserMap() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      map = _useState2[0],\n      setMap = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      d = _useState4[0],\n      dd = _useState4[1];\n\n  var mapElement = useRef();\n\n  var canGetLocation = function canGetLocation() {\n    if (!navigator.geolocation) return false;\n    if (sessionStorage.getItem(locationString)) return true;\n    navigator.geolocation.getCurrentPosition(function (position) {\n      var coords = position.coords;\n      var coordsObject = {\n        lon: coords.longitude,\n        lat: coords.latitude\n      };\n      sessionStorage.setItem(locationString, JSON.stringify(coordsObject));\n      console.log(\"here\");\n      return true;\n    }, function () {\n      return false;\n    });\n  };\n\n  var updateLocation = function updateLocation() {\n    console.log(\"HERE\");\n    var coordsString = sessionStorage.getItem(locationString);\n    var coords = JSON.parse(coordsString);\n    map.addLayer(createPinLayer(coords.lon, coords.lat, \"me\", circleRed));\n  };\n\n  var addPins = function addPins() {\n    Object.keys(pinData).forEach(function (key) {\n      var name = key;\n      var crab = pinData[key];\n      map.addLayer(createPinLayer(crab.lon, crab.lat, name, circleRed));\n    });\n  };\n\n  var createMap = function createMap() {\n    var initialMap = new Map({\n      target: mapElement.current,\n      layers: [new TileLayer({\n        source: new OSM()\n      })],\n      view: new View({\n        center: fromLonLat([37.41, 8.82]),\n        zoom: 4\n      })\n    });\n    setMap(initialMap);\n  };\n\n  useEffect(function () {\n    if (!map) {\n      createMap();\n      return;\n    }\n\n    addPins();\n\n    if (canGetLocation()) {\n      console.log(\"here?\");\n      updateLocation();\n      setInterval(updateLocation(), 5000);\n    }\n  });\n  return _jsx(\"div\", {\n    ref: mapElement,\n    style: {\n      height: \"600px\",\n      width: \"100%\"\n    }\n  });\n};\n\nexport default UserMap;","map":{"version":3,"sources":["C:/Users/Joshua/comp-4800-team-4/client/UserMap.js"],"names":["React","useState","useRef","useEffect","pinData","circleRed","Map","TileLayer","View","OSM","fromLonLat","createPinLayer","locationString","UserMap","map","setMap","d","dd","mapElement","canGetLocation","navigator","geolocation","sessionStorage","getItem","getCurrentPosition","position","coords","coordsObject","lon","longitude","lat","latitude","setItem","JSON","stringify","console","log","updateLocation","coordsString","parse","addLayer","addPins","Object","keys","forEach","key","name","crab","createMap","initialMap","target","current","layers","source","view","center","zoom","setInterval","height","width"],"mappings":"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","sourcesContent":["import \"ol/ol.css\";\r\nimport React, { useState, useRef, useEffect } from \"react\";\r\nimport pinData from \"./data/pinData\";\r\nimport circleRed from \"./images/circleRed.png\";\r\nimport Map from \"ol/Map\";\r\nimport TileLayer from \"ol/layer/Tile\";\r\nimport View from \"ol/View\";\r\nimport OSM from \"ol/source/OSM\";\r\nimport { fromLonLat } from \"ol/proj\";\r\nimport createPinLayer from \"./utilities/createPinLayer\";\r\n\r\nconst locationString = \"location\";\r\n\r\nconst UserMap = () => {\r\n  const [map, setMap] = useState();\r\n  const [d, dd] = useState();\r\n  const mapElement = useRef();\r\n\r\n  // Return true if the user reveals their location.\r\n  const canGetLocation = () => {\r\n    if (!navigator.geolocation) return false;\r\n\r\n    if (sessionStorage.getItem(locationString)) return true;\r\n\r\n    navigator.geolocation.getCurrentPosition(\r\n      // On success.\r\n      (position) => {\r\n        let coords = position.coords;\r\n        let coordsObject = {\r\n          lon: coords.longitude,\r\n          lat: coords.latitude\r\n        }\r\n        sessionStorage.setItem(locationString, JSON.stringify(coordsObject));\r\n        console.log(\"here\")\r\n        return true;\r\n      },\r\n      // On fail.\r\n      () => {\r\n        return false;\r\n      }\r\n    );\r\n  };\r\n\r\n  const updateLocation = () => {\r\n    console.log(\"HERE\");\r\n    let coordsString = sessionStorage.getItem(locationString);\r\n    let coords = JSON.parse(coordsString);\r\n\r\n    map.addLayer(createPinLayer(coords.lon, coords.lat, \"me\", circleRed));\r\n  };\r\n\r\n  const addPins = () => {\r\n    Object.keys(pinData).forEach((key) => {\r\n      let name = key;\r\n      let crab = pinData[key];\r\n\r\n      map.addLayer(createPinLayer(crab.lon, crab.lat, name, circleRed));\r\n    });\r\n  };\r\n\r\n  const createMap = () => {\r\n    const initialMap = new Map({\r\n      target: mapElement.current,\r\n      layers: [\r\n        new TileLayer({\r\n          source: new OSM(),\r\n        }),\r\n      ],\r\n      view: new View({\r\n        center: fromLonLat([37.41, 8.82]),\r\n        zoom: 4,\r\n      }),\r\n    });\r\n\r\n    setMap(initialMap);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!map) {\r\n      createMap();\r\n      return;\r\n    }\r\n\r\n    addPins();\r\n\r\n    if (canGetLocation()) {\r\n      console.log(\"here?\");\r\n      updateLocation()\r\n      setInterval(updateLocation(), 5000);\r\n    }\r\n  });\r\n\r\n  return <div ref={mapElement} style={{ height: \"600px\", width: \"100%\" }}></div>;\r\n};\r\n\r\nexport default UserMap;\r\n"]},"metadata":{},"sourceType":"module"}