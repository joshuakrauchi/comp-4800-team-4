{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/control/FullScreen\n */\n\n\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport MapProperty from '../MapProperty.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_UNSUPPORTED } from '../css.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { replaceNode } from '../dom.js';\nvar events = ['fullscreenchange', 'webkitfullscreenchange', 'MSFullscreenChange'];\n/**\n * @enum {string}\n */\n\nvar FullScreenEventType = {\n  /**\n   * Triggered after the map entered fullscreen.\n   * @event FullScreenEventType#enterfullscreen\n   * @api\n   */\n  ENTERFULLSCREEN: 'enterfullscreen',\n\n  /**\n   * Triggered after the map leave fullscreen.\n   * @event FullScreenEventType#leavefullscreen\n   * @api\n   */\n  LEAVEFULLSCREEN: 'leavefullscreen'\n};\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen', import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen'|import(\"../ObjectEventType\").Types, Return>} FullScreenOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-full-screen'] CSS class name.\n * @property {string|Text|HTMLElement} [label='\\u2922'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|Text|HTMLElement} [labelActive='\\u00d7'] Text label to use for the\n * button when full-screen is active.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [activeClassName=className + '-true'] CSS class name for the button\n * when full-screen is active.\n * @property {string} [inactiveClassName=className + '-false'] CSS class name for the button\n * when full-screen is inactive.\n * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.\n * @property {boolean} [keys=false] Full keyboard access.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {HTMLElement|string} [source] The element to be displayed\n * fullscreen. When not provided, the element containing the map viewport will\n * be displayed fullscreen.\n */\n\n/**\n * @classdesc\n * Provides a button that when clicked fills up the full screen with the map.\n * The full screen source element is by default the element containing the map viewport unless\n * overridden by providing the `source` option. In which case, the dom\n * element introduced using this parameter will be displayed in full screen.\n *\n * When in full screen mode, a close button is shown to exit full screen mode.\n * The [Fullscreen API](https://www.w3.org/TR/fullscreen/) is used to\n * toggle the map in full screen mode.\n *\n * @fires FullScreenEventType#enterfullscreen\n * @fires FullScreenEventType#leavefullscreen\n * @api\n */\n\nvar FullScreen =\n/** @class */\nfunction (_super) {\n  __extends(FullScreen, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function FullScreen(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      element: document.createElement('div'),\n      target: options.target\n    }) || this;\n    /***\n     * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    _this.on;\n    /***\n     * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    _this.once;\n    /***\n     * @type {FullScreenOnSignature<void>}\n     */\n\n    _this.un;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.keys_ = options.keys !== undefined ? options.keys : false;\n    /**\n     * @private\n     * @type {HTMLElement|string|undefined}\n     */\n\n    _this.source_ = options.source;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    _this.isInFullscreen_ = false;\n    /**\n     * @private\n     */\n\n    _this.boundHandleMapTargetChange_ = _this.handleMapTargetChange_.bind(_this);\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.cssClassName_ = options.className !== undefined ? options.className : 'ol-full-screen';\n    /**\n     * @private\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n\n    _this.documentListeners_ = [];\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n\n    _this.activeClassName_ = options.activeClassName !== undefined ? options.activeClassName.split(' ') : [_this.cssClassName_ + '-true'];\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n\n    _this.inactiveClassName_ = options.inactiveClassName !== undefined ? options.inactiveClassName.split(' ') : [_this.cssClassName_ + '-false'];\n    var label = options.label !== undefined ? options.label : '\\u2922';\n    /**\n     * @private\n     * @type {Text|HTMLElement}\n     */\n\n    _this.labelNode_ = typeof label === 'string' ? document.createTextNode(label) : label;\n    var labelActive = options.labelActive !== undefined ? options.labelActive : '\\u00d7';\n    /**\n     * @private\n     * @type {Text|HTMLElement}\n     */\n\n    _this.labelActiveNode_ = typeof labelActive === 'string' ? document.createTextNode(labelActive) : labelActive;\n    var tipLabel = options.tipLabel ? options.tipLabel : 'Toggle full-screen';\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n\n    _this.button_ = document.createElement('button');\n    _this.button_.title = tipLabel;\n\n    _this.button_.setAttribute('type', 'button');\n\n    _this.button_.appendChild(_this.labelNode_);\n\n    _this.button_.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);\n\n    _this.setClassName_(_this.button_, _this.isInFullscreen_);\n\n    _this.element.className = \"\".concat(_this.cssClassName_, \" \").concat(CLASS_UNSELECTABLE, \" \").concat(CLASS_CONTROL);\n\n    _this.element.appendChild(_this.button_);\n\n    return _this;\n  }\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n\n\n  FullScreen.prototype.handleClick_ = function (event) {\n    event.preventDefault();\n    this.handleFullScreen_();\n  };\n  /**\n   * @private\n   */\n\n\n  FullScreen.prototype.handleFullScreen_ = function () {\n    var map = this.getMap();\n\n    if (!map) {\n      return;\n    }\n\n    var doc = map.getOwnerDocument();\n\n    if (!isFullScreenSupported(doc)) {\n      return;\n    }\n\n    if (isFullScreen(doc)) {\n      exitFullScreen(doc);\n    } else {\n      var element = void 0;\n\n      if (this.source_) {\n        element = typeof this.source_ === 'string' ? doc.getElementById(this.source_) : this.source_;\n      } else {\n        element = map.getTargetElement();\n      }\n\n      if (this.keys_) {\n        requestFullScreenWithKeys(element);\n      } else {\n        requestFullScreen(element);\n      }\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  FullScreen.prototype.handleFullScreenChange_ = function () {\n    var map = this.getMap();\n\n    if (!map) {\n      return;\n    }\n\n    var wasInFullscreen = this.isInFullscreen_;\n    this.isInFullscreen_ = isFullScreen(map.getOwnerDocument());\n\n    if (wasInFullscreen !== this.isInFullscreen_) {\n      this.setClassName_(this.button_, this.isInFullscreen_);\n\n      if (this.isInFullscreen_) {\n        replaceNode(this.labelActiveNode_, this.labelNode_);\n        this.dispatchEvent(FullScreenEventType.ENTERFULLSCREEN);\n      } else {\n        replaceNode(this.labelNode_, this.labelActiveNode_);\n        this.dispatchEvent(FullScreenEventType.LEAVEFULLSCREEN);\n      }\n\n      map.updateSize();\n    }\n  };\n  /**\n   * @param {HTMLElement} element Target element\n   * @param {boolean} fullscreen True if fullscreen class name should be active\n   * @private\n   */\n\n\n  FullScreen.prototype.setClassName_ = function (element, fullscreen) {\n    var _a, _b, _c, _d;\n\n    if (fullscreen) {\n      (_a = element.classList).remove.apply(_a, this.inactiveClassName_);\n\n      (_b = element.classList).add.apply(_b, this.activeClassName_);\n    } else {\n      (_c = element.classList).remove.apply(_c, this.activeClassName_);\n\n      (_d = element.classList).add.apply(_d, this.inactiveClassName_);\n    }\n  };\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default|null} map Map.\n   * @api\n   */\n\n\n  FullScreen.prototype.setMap = function (map) {\n    var oldMap = this.getMap();\n\n    if (oldMap) {\n      oldMap.removeChangeListener(MapProperty.TARGET, this.boundHandleMapTargetChange_);\n    }\n\n    _super.prototype.setMap.call(this, map);\n\n    this.handleMapTargetChange_();\n\n    if (map) {\n      map.addChangeListener(MapProperty.TARGET, this.boundHandleMapTargetChange_);\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  FullScreen.prototype.handleMapTargetChange_ = function () {\n    var listeners = this.documentListeners_;\n\n    for (var i = 0, ii = listeners.length; i < ii; ++i) {\n      unlistenByKey(listeners[i]);\n    }\n\n    listeners.length = 0;\n    var map = this.getMap();\n\n    if (map) {\n      var doc = map.getOwnerDocument();\n\n      if (isFullScreenSupported(doc)) {\n        this.element.classList.remove(CLASS_UNSUPPORTED);\n      } else {\n        this.element.classList.add(CLASS_UNSUPPORTED);\n      }\n\n      for (var i = 0, ii = events.length; i < ii; ++i) {\n        listeners.push(listen(doc, events[i], this.handleFullScreenChange_, this));\n      }\n\n      this.handleFullScreenChange_();\n    }\n  };\n\n  return FullScreen;\n}(Control);\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Fullscreen is supported by the current platform.\n */\n\n\nfunction isFullScreenSupported(doc) {\n  var body = doc.body;\n  return !!(body['webkitRequestFullscreen'] || body['msRequestFullscreen'] && doc['msFullscreenEnabled'] || body.requestFullscreen && doc.fullscreenEnabled);\n}\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Element is currently in fullscreen.\n */\n\n\nfunction isFullScreen(doc) {\n  return !!(doc['webkitIsFullScreen'] || doc['msFullscreenElement'] || doc.fullscreenElement);\n}\n/**\n * Request to fullscreen an element.\n * @param {HTMLElement} element Element to request fullscreen\n */\n\n\nfunction requestFullScreen(element) {\n  if (element.requestFullscreen) {\n    element.requestFullscreen();\n  } else if (element['msRequestFullscreen']) {\n    element['msRequestFullscreen']();\n  } else if (element['webkitRequestFullscreen']) {\n    element['webkitRequestFullscreen']();\n  }\n}\n/**\n * Request to fullscreen an element with keyboard input.\n * @param {HTMLElement} element Element to request fullscreen\n */\n\n\nfunction requestFullScreenWithKeys(element) {\n  if (element['webkitRequestFullscreen']) {\n    element['webkitRequestFullscreen']();\n  } else {\n    requestFullScreen(element);\n  }\n}\n/**\n * Exit fullscreen.\n * @param {Document} doc The document to exit fullscren from\n */\n\n\nfunction exitFullScreen(doc) {\n  if (doc.exitFullscreen) {\n    doc.exitFullscreen();\n  } else if (doc['msExitFullscreen']) {\n    doc['msExitFullscreen']();\n  } else if (doc['webkitExitFullscreen']) {\n    doc['webkitExitFullscreen']();\n  }\n}\n\nexport default FullScreen;","map":{"version":3,"mappings":"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","names":["Control","EventType","MapProperty","CLASS_CONTROL","CLASS_UNSELECTABLE","CLASS_UNSUPPORTED","listen","unlistenByKey","replaceNode","events","FullScreenEventType","ENTERFULLSCREEN","LEAVEFULLSCREEN","__extends","opt_options","options","_super","element","document","createElement","target","_this","on","once","un","keys_","keys","undefined","source_","source","isInFullscreen_","boundHandleMapTargetChange_","handleMapTargetChange_","bind","cssClassName_","className","documentListeners_","activeClassName_","activeClassName","split","inactiveClassName_","inactiveClassName","label","labelNode_","createTextNode","labelActive","labelActiveNode_","tipLabel","button_","title","setAttribute","appendChild","addEventListener","CLICK","handleClick_","setClassName_","concat","FullScreen","event","preventDefault","handleFullScreen_","map","getMap","doc","getOwnerDocument","isFullScreenSupported","isFullScreen","exitFullScreen","getElementById","getTargetElement","requestFullScreenWithKeys","requestFullScreen","wasInFullscreen","dispatchEvent","updateSize","fullscreen","classList","remove","apply","_a","add","_b","_c","_d","oldMap","removeChangeListener","TARGET","setMap","call","addChangeListener","listeners","i","ii","length","push","handleFullScreenChange_","body","requestFullscreen","fullscreenEnabled","fullscreenElement","exitFullscreen"],"sources":["C:\\Users\\GAURA\\comp-4800-team-4\\client\\node_modules\\ol\\src\\control\\FullScreen.js"],"sourcesContent":["/**\n * @module ol/control/FullScreen\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport MapProperty from '../MapProperty.js';\nimport {CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_UNSUPPORTED} from '../css.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {replaceNode} from '../dom.js';\n\nconst events = [\n  'fullscreenchange',\n  'webkitfullscreenchange',\n  'MSFullscreenChange',\n];\n\n/**\n * @enum {string}\n */\nconst FullScreenEventType = {\n  /**\n   * Triggered after the map entered fullscreen.\n   * @event FullScreenEventType#enterfullscreen\n   * @api\n   */\n  ENTERFULLSCREEN: 'enterfullscreen',\n\n  /**\n   * Triggered after the map leave fullscreen.\n   * @event FullScreenEventType#leavefullscreen\n   * @api\n   */\n  LEAVEFULLSCREEN: 'leavefullscreen',\n};\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen', import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen'|import(\"../ObjectEventType\").Types, Return>} FullScreenOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-full-screen'] CSS class name.\n * @property {string|Text|HTMLElement} [label='\\u2922'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|Text|HTMLElement} [labelActive='\\u00d7'] Text label to use for the\n * button when full-screen is active.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [activeClassName=className + '-true'] CSS class name for the button\n * when full-screen is active.\n * @property {string} [inactiveClassName=className + '-false'] CSS class name for the button\n * when full-screen is inactive.\n * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.\n * @property {boolean} [keys=false] Full keyboard access.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {HTMLElement|string} [source] The element to be displayed\n * fullscreen. When not provided, the element containing the map viewport will\n * be displayed fullscreen.\n */\n\n/**\n * @classdesc\n * Provides a button that when clicked fills up the full screen with the map.\n * The full screen source element is by default the element containing the map viewport unless\n * overridden by providing the `source` option. In which case, the dom\n * element introduced using this parameter will be displayed in full screen.\n *\n * When in full screen mode, a close button is shown to exit full screen mode.\n * The [Fullscreen API](https://www.w3.org/TR/fullscreen/) is used to\n * toggle the map in full screen mode.\n *\n * @fires FullScreenEventType#enterfullscreen\n * @fires FullScreenEventType#leavefullscreen\n * @api\n */\nclass FullScreen extends Control {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    super({\n      element: document.createElement('div'),\n      target: options.target,\n    });\n\n    /***\n     * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {FullScreenOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.keys_ = options.keys !== undefined ? options.keys : false;\n\n    /**\n     * @private\n     * @type {HTMLElement|string|undefined}\n     */\n    this.source_ = options.source;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.isInFullscreen_ = false;\n\n    /**\n     * @private\n     */\n    this.boundHandleMapTargetChange_ = this.handleMapTargetChange_.bind(this);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.cssClassName_ =\n      options.className !== undefined ? options.className : 'ol-full-screen';\n\n    /**\n     * @private\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    this.documentListeners_ = [];\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.activeClassName_ =\n      options.activeClassName !== undefined\n        ? options.activeClassName.split(' ')\n        : [this.cssClassName_ + '-true'];\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.inactiveClassName_ =\n      options.inactiveClassName !== undefined\n        ? options.inactiveClassName.split(' ')\n        : [this.cssClassName_ + '-false'];\n\n    const label = options.label !== undefined ? options.label : '\\u2922';\n\n    /**\n     * @private\n     * @type {Text|HTMLElement}\n     */\n    this.labelNode_ =\n      typeof label === 'string' ? document.createTextNode(label) : label;\n\n    const labelActive =\n      options.labelActive !== undefined ? options.labelActive : '\\u00d7';\n\n    /**\n     * @private\n     * @type {Text|HTMLElement}\n     */\n    this.labelActiveNode_ =\n      typeof labelActive === 'string'\n        ? document.createTextNode(labelActive)\n        : labelActive;\n\n    const tipLabel = options.tipLabel ? options.tipLabel : 'Toggle full-screen';\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.button_ = document.createElement('button');\n    this.button_.title = tipLabel;\n    this.button_.setAttribute('type', 'button');\n    this.button_.appendChild(this.labelNode_);\n    this.button_.addEventListener(\n      EventType.CLICK,\n      this.handleClick_.bind(this),\n      false\n    );\n    this.setClassName_(this.button_, this.isInFullscreen_);\n\n    this.element.className = `${this.cssClassName_} ${CLASS_UNSELECTABLE} ${CLASS_CONTROL}`;\n    this.element.appendChild(this.button_);\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleFullScreen_();\n  }\n\n  /**\n   * @private\n   */\n  handleFullScreen_() {\n    const map = this.getMap();\n    if (!map) {\n      return;\n    }\n    const doc = map.getOwnerDocument();\n    if (!isFullScreenSupported(doc)) {\n      return;\n    }\n    if (isFullScreen(doc)) {\n      exitFullScreen(doc);\n    } else {\n      let element;\n      if (this.source_) {\n        element =\n          typeof this.source_ === 'string'\n            ? doc.getElementById(this.source_)\n            : this.source_;\n      } else {\n        element = map.getTargetElement();\n      }\n      if (this.keys_) {\n        requestFullScreenWithKeys(element);\n      } else {\n        requestFullScreen(element);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  handleFullScreenChange_() {\n    const map = this.getMap();\n    if (!map) {\n      return;\n    }\n    const wasInFullscreen = this.isInFullscreen_;\n    this.isInFullscreen_ = isFullScreen(map.getOwnerDocument());\n    if (wasInFullscreen !== this.isInFullscreen_) {\n      this.setClassName_(this.button_, this.isInFullscreen_);\n      if (this.isInFullscreen_) {\n        replaceNode(this.labelActiveNode_, this.labelNode_);\n        this.dispatchEvent(FullScreenEventType.ENTERFULLSCREEN);\n      } else {\n        replaceNode(this.labelNode_, this.labelActiveNode_);\n        this.dispatchEvent(FullScreenEventType.LEAVEFULLSCREEN);\n      }\n      map.updateSize();\n    }\n  }\n\n  /**\n   * @param {HTMLElement} element Target element\n   * @param {boolean} fullscreen True if fullscreen class name should be active\n   * @private\n   */\n  setClassName_(element, fullscreen) {\n    if (fullscreen) {\n      element.classList.remove(...this.inactiveClassName_);\n      element.classList.add(...this.activeClassName_);\n    } else {\n      element.classList.remove(...this.activeClassName_);\n      element.classList.add(...this.inactiveClassName_);\n    }\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    const oldMap = this.getMap();\n    if (oldMap) {\n      oldMap.removeChangeListener(\n        MapProperty.TARGET,\n        this.boundHandleMapTargetChange_\n      );\n    }\n\n    super.setMap(map);\n\n    this.handleMapTargetChange_();\n    if (map) {\n      map.addChangeListener(\n        MapProperty.TARGET,\n        this.boundHandleMapTargetChange_\n      );\n    }\n  }\n\n  /**\n   * @private\n   */\n  handleMapTargetChange_() {\n    const listeners = this.documentListeners_;\n    for (let i = 0, ii = listeners.length; i < ii; ++i) {\n      unlistenByKey(listeners[i]);\n    }\n    listeners.length = 0;\n\n    const map = this.getMap();\n    if (map) {\n      const doc = map.getOwnerDocument();\n      if (isFullScreenSupported(doc)) {\n        this.element.classList.remove(CLASS_UNSUPPORTED);\n      } else {\n        this.element.classList.add(CLASS_UNSUPPORTED);\n      }\n\n      for (let i = 0, ii = events.length; i < ii; ++i) {\n        listeners.push(\n          listen(doc, events[i], this.handleFullScreenChange_, this)\n        );\n      }\n      this.handleFullScreenChange_();\n    }\n  }\n}\n\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Fullscreen is supported by the current platform.\n */\nfunction isFullScreenSupported(doc) {\n  const body = doc.body;\n  return !!(\n    body['webkitRequestFullscreen'] ||\n    (body['msRequestFullscreen'] && doc['msFullscreenEnabled']) ||\n    (body.requestFullscreen && doc.fullscreenEnabled)\n  );\n}\n\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Element is currently in fullscreen.\n */\nfunction isFullScreen(doc) {\n  return !!(\n    doc['webkitIsFullScreen'] ||\n    doc['msFullscreenElement'] ||\n    doc.fullscreenElement\n  );\n}\n\n/**\n * Request to fullscreen an element.\n * @param {HTMLElement} element Element to request fullscreen\n */\nfunction requestFullScreen(element) {\n  if (element.requestFullscreen) {\n    element.requestFullscreen();\n  } else if (element['msRequestFullscreen']) {\n    element['msRequestFullscreen']();\n  } else if (element['webkitRequestFullscreen']) {\n    element['webkitRequestFullscreen']();\n  }\n}\n\n/**\n * Request to fullscreen an element with keyboard input.\n * @param {HTMLElement} element Element to request fullscreen\n */\nfunction requestFullScreenWithKeys(element) {\n  if (element['webkitRequestFullscreen']) {\n    element['webkitRequestFullscreen']();\n  } else {\n    requestFullScreen(element);\n  }\n}\n\n/**\n * Exit fullscreen.\n * @param {Document} doc The document to exit fullscren from\n */\nfunction exitFullScreen(doc) {\n  if (doc.exitFullscreen) {\n    doc.exitFullscreen();\n  } else if (doc['msExitFullscreen']) {\n    doc['msExitFullscreen']();\n  } else if (doc['webkitExitFullscreen']) {\n    doc['webkitExitFullscreen']();\n  }\n}\n\nexport default FullScreen;\n"]},"metadata":{},"sourceType":"module"}