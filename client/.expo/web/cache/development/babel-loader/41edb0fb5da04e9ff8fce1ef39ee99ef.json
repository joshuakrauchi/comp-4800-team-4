{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport \"ol/ol.css\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport pinData from \"./data/pinData\";\nimport circleRed from \"./images/circleRed.png\";\nimport Map from \"ol/Map\";\nimport TileLayer from \"ol/layer/Tile\";\nimport View from \"ol/View\";\nimport OSM from \"ol/source/OSM\";\nimport { fromLonLat } from \"ol/proj\";\nimport createPinLayer from \"./utilities/createPinLayer\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar locationString = \"location\";\n\nvar UserMap = function UserMap() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      map = _useState2[0],\n      setMap = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userPin = _useState4[0],\n      setUserPin = _useState4[1];\n\n  var mapElement = useRef();\n\n  var tryUpdateLocation = function tryUpdateLocation() {\n    if (!navigator.geolocation) return;\n    navigator.geolocation.watchPosition(function (position) {\n      map.addLayer(createPinLayer(position.coords.longitude, position.coords.latitude, \"me\", circleRed));\n    });\n  };\n\n  var updateLocation = function updateLocation() {\n    map.addLayer(createPinLayer(coords.lon, coords.lat, \"me\", circleRed));\n  };\n\n  var addPins = function addPins() {\n    Object.keys(pinData).forEach(function (key) {\n      var name = key;\n      var crab = pinData[key];\n      map.addLayer(createPinLayer(crab.lon, crab.lat, name, circleRed));\n    });\n  };\n\n  var createMap = function createMap() {\n    var initialMap = new Map({\n      target: mapElement.current,\n      layers: [new TileLayer({\n        source: new OSM()\n      })],\n      view: new View({\n        center: fromLonLat([37.41, 8.82]),\n        zoom: 4\n      })\n    });\n    setMap(initialMap);\n  };\n\n  useEffect(function () {\n    if (!map) {\n      createMap();\n      return;\n    }\n\n    addPins();\n    tryGetLocation();\n  });\n  return _jsx(\"div\", {\n    ref: mapElement,\n    style: {\n      height: \"600px\",\n      width: \"100%\"\n    }\n  });\n};\n\nexport default UserMap;","map":{"version":3,"sources":["C:/Users/Joshua/comp-4800-team-4/client/UserMap.js"],"names":["React","useState","useRef","useEffect","pinData","circleRed","Map","TileLayer","View","OSM","fromLonLat","createPinLayer","locationString","UserMap","map","setMap","userPin","setUserPin","mapElement","tryUpdateLocation","navigator","geolocation","watchPosition","position","addLayer","coords","longitude","latitude","updateLocation","lon","lat","addPins","Object","keys","forEach","key","name","crab","createMap","initialMap","target","current","layers","source","view","center","zoom","tryGetLocation","height","width"],"mappings":"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","sourcesContent":["import \"ol/ol.css\";\r\nimport React, { useState, useRef, useEffect } from \"react\";\r\nimport pinData from \"./data/pinData\";\r\nimport circleRed from \"./images/circleRed.png\";\r\nimport Map from \"ol/Map\";\r\nimport TileLayer from \"ol/layer/Tile\";\r\nimport View from \"ol/View\";\r\nimport OSM from \"ol/source/OSM\";\r\nimport { fromLonLat } from \"ol/proj\";\r\nimport createPinLayer from \"./utilities/createPinLayer\";\r\n\r\nconst locationString = \"location\";\r\n\r\nconst UserMap = () => {\r\n  const [map, setMap] = useState();\r\n  const [userPin, setUserPin] = useState();\r\n  const mapElement = useRef();\r\n\r\n  // Return true if the user reveals their location.\r\n  const tryUpdateLocation = () => {\r\n    if (!navigator.geolocation) return;\r\n\r\n    /*if (sessionStorage.getItem(locationString)) {\r\n      updateLocation();\r\n      setInterval(updateLocation, 5000);\r\n    }*/\r\n\r\n    navigator.geolocation.watchPosition((position) => {\r\n      map.addLayer(createPinLayer(position.coords.longitude, position.coords.latitude, \"me\", circleRed));\r\n//      updateLocation();\r\n    })\r\n\r\n    /*navigator.geolocation.getCurrentPosition(\r\n      // On success.\r\n      (position) => {\r\n        let coords = position.coords;\r\n        let coordsObject = {\r\n          lon: coords.longitude,\r\n          lat: coords.latitude,\r\n        };\r\n        sessionStorage.setItem(locationString, JSON.stringify(coordsObject));\r\n        updateLocation();\r\n        setInterval(updateLocation, 5000);\r\n      }\r\n    );*/\r\n  };\r\n\r\n  const updateLocation = () => {\r\n    //let coordsString = sessionStorage.getItem(locationString);\r\n    //let coords = JSON.parse(coordsString);\r\n    map.addLayer(createPinLayer(coords.lon, coords.lat, \"me\", circleRed));\r\n  };\r\n\r\n  const addPins = () => {\r\n    Object.keys(pinData).forEach((key) => {\r\n      let name = key;\r\n      let crab = pinData[key];\r\n\r\n      map.addLayer(createPinLayer(crab.lon, crab.lat, name, circleRed));\r\n    });\r\n  };\r\n\r\n  const createMap = () => {\r\n    const initialMap = new Map({\r\n      target: mapElement.current,\r\n      layers: [\r\n        new TileLayer({\r\n          source: new OSM(),\r\n        }),\r\n      ],\r\n      view: new View({\r\n        center: fromLonLat([37.41, 8.82]),\r\n        zoom: 4,\r\n      }),\r\n    });\r\n\r\n    setMap(initialMap);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!map) {\r\n      createMap();\r\n      return;\r\n    }\r\n\r\n    addPins();\r\n    tryGetLocation();\r\n  });\r\n\r\n  return <div ref={mapElement} style={{ height: \"600px\", width: \"100%\" }}></div>;\r\n};\r\n\r\nexport default UserMap;\r\n"]},"metadata":{},"sourceType":"module"}